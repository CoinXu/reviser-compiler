/**
 * @date 2020-06-22
 * @author duanxian0605@163.com
 * @description
 */

#include <compiler/javascript/javascript_generator.h>
#include <compiler/javascript/javascript_common.h>
#include <compiler/javascript/javascript_enum.h>
#include <compiler/javascript/javascript_struct.h>

namespace reviser {
namespace javascript {
  std::map<DataType, string> JavaScriptBuildInDataTypeMap = {
    { TYPE_BOOL, "boolean" },
    { TYPE_FLOAT, "number" },
    { TYPE_DOUBLE, "number" },
    { TYPE_INT32, "number" },
    { TYPE_INT64, "number" },
    { TYPE_UINT32, "number" },
    { TYPE_UINT64, "number" },
    { TYPE_STRING, "string" }
  };

  std::map<DataType, vector<ReviserType>> JavaScriptDataTypeReviserMap = {
    { TYPE_BOOL, { REVISER_TYPE_BOOL, REVISER_TO_BOOL } },
    { TYPE_FLOAT, { REVISER_TYPE_FLOAT, REVISER_TO_FLOAT } },
    { TYPE_DOUBLE, { REVISER_TYPE_DOUBLE, REVISER_TO_DOUBLE } },
    { TYPE_INT32, { REVISER_TYPE_INT32, REVISER_TO_INT32 } },
    { TYPE_INT64, { REVISER_TYPE_INT64, REVISER_TO_INT64 } },
    { TYPE_UINT32, { REVISER_TYPE_UINT32, REVISER_TO_UINT32 } },
    { TYPE_UINT64, { REVISER_TYPE_UINT64, REVISER_TO_UINT64 } },
    { TYPE_STRING, { REVISER_TYPE_STRING, REVISER_TO_STRING } }
  };

  JavaScriptGenerator::JavaScriptGenerator(): CodeGenerator(), message("javascript") {}

  JavaScriptGenerator::~JavaScriptGenerator() {}

  //
  // private
  string JavaScriptGenerator::Import() {
    // decorators
    vector<string> deco(descriptor->Decorators());
    vector<string> decorators;

    for (vector<string>::iterator it = begin(deco); it != end(deco); it++ ) {
      if (ReviserSyntaxBuildIn.find(*it) == ReviserSyntaxBuildIn.end()) {
        message.Runtime("undefined error: " + *it + " not defined in decorators.");
      }
      decorators.push_back(JavaScriptCommon::ImportId(ReviserSyntaxBuildIn.at(*it)));
    }

    vector<string> revisers;
    vector<DataType> types = descriptor->DataTypes();
    map<string, int> unique;

    if (descriptor->include_type_array) {
      revisers.push_back(JavaScriptCommon::ImportId(ReviserMethodMap[REVISER_TYPE_ARRAY]));
    }

    if (descriptor->include_struct_array) {
      revisers.push_back(JavaScriptCommon::ImportId(ReviserMethodMap[REVISER_TYPE_ARRAY_STRUCT]));
    }

    for (vector<DataType>::iterator it = begin(types); it != end(types); it++) {
      vector<ReviserSyntaxDefinition> defs = JavaScriptCommon::FindReviserSyntaxDefinitionByDataType(*it);
      for (ReviserSyntaxDefinition d : defs) {
        string id = JavaScriptCommon::ImportId(d);
        if (unique.find(id) == unique.end()) {
          unique[id] = 0;
          revisers.push_back(id);
        }
      }
    }

    return "import { Reviser } from \"data-reviser\";\n"
      "import { " + JavaScriptCommon::JoinVector(decorators, ", ") + " } from \"data-reviser\";\n"
      "import { " + JavaScriptCommon::JoinVector(revisers, ", ") + " } from \"data-reviser\";";
  }

  string JavaScriptGenerator::Export() {
    string code;

    if (descriptor->GlobalVariables().size() == 0) {
      return code;
    }

    code += "export {\n";
    vector<Descriptor::VariableDeclare> variables = descriptor->GlobalVariables();
    for (vector<Descriptor::VariableDeclare>::iterator it = begin(variables); it != end(variables); it++) {
      code += JavaScriptCommon::Indent(1) + (*it).id + (next(it) == end(variables) ? "\n" : ",\n");
    }

    return code += "}";
  }

  //
  // public
  string JavaScriptGenerator::StmtStruct(Struct* s) {
    JavaScriptStruct g(s);
    return g.Generate();
  }

  string JavaScriptGenerator::StmtEnum(Enum* e) {
    JavaScriptEnum g(e);
    return g.Generate();
  }

  string JavaScriptGenerator::Generate() {
    string block_separetor = "\n\n";
    string code(
      "//\n"
      "// language: JavaScript\n"
      "// generated by reviser-comiper\n"
      "// do not change this file\n"
      "// see https://github.com/CoinXu/reviser-compiler\n\n\n"
    );

    code += Import() + block_separetor;

    for (StmtSeqItem it: seq) {
      switch(it.type) {
        case STMT_TYPE_STRUCT:
          code += StmtStruct(structures.at(it.index)) + block_separetor;
          break;

        case STMT_TYPE_ENUM:
          code += StmtEnum(enums.at(it.index)) + block_separetor;
          break;

        default:
          break;
      }
    }

    return code + Export() + block_separetor;
  }

}; // javascript
}; // compiler
