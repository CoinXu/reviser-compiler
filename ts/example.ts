//
// language: TypeScript
// generated by reviser-comiper
// do not change this file
// see https://github.com/CoinXu/reviser-compiler


import { Reviser } from "data-reviser";
import { Required } from "data-reviser";
import { TypeArray, TypeArrayStruct, TypeBoolean, ToBoolean, TypeString, ToString, TypeFloat, ToFloat, TypeDouble, ToDouble, TypeInt64, ToInt64, TypeUnInt32, ToUnInt32 } from "data-reviser";

enum Color {
  Red,
  Pink = 100,
  Blue = 200
}

namespace NsFoo {
  export class Foo extends Reviser {
  }
}


namespace NsBaz {
  export class Baz extends Reviser {
  }
}


namespace NsBar {
  enum Numberic {
    Int32,
    Float,
    Double
  }

  namespace NsFoo {
    export class Foo extends Reviser {
      @TypeArray([TypeBoolean(), ToBoolean])
      public b: boolean[] = [];

      @TypeArrayStruct(Bar)
      public bar: Bar[] = [];

      @TypeStruct(Bar)
      public ba: Bar = null;
    }
  }


  namespace NsBaz {
    enum DataType {
      Int32,
      Int64,
      String
    }

    namespace NsFoo {
      enum Language {
        Cpp,
        TypeScript,
        JavaScript
      }

      export class Foo extends Reviser {
        @Required()
        public lang: Language = Language.Cpp;

        @Required()
        public second_lang: Language = Language.TypeScript;

        public type: DataType = DataType.String;
      }
    }


    export class Baz extends Reviser {
      public type: DataType = DataType.Int32;

      public num: Numberic = Numberic.Double;

      @TypeStruct(Foo)
      @Required()
      public foo: Foo = [];
    }
  }


  export class Bar extends Reviser {
    @TypeStruct(Baz)
    public baz: Baz = null;

    @TypeArrayStruct(Baz)
    public bazs: Baz[] = [];

    public num: Numberic = Numberic.Int32;

    @TypeString()
    @ToString
    @Required()
    public s: string = "string";

    @TypeInt32()
    @ToInt32
    @Required()
    public i32: number = 1;

    @TypeArray([TypeDouble(), ToDouble])
    public doub: number[] = [];

    @TypeArray([TypeFloat(), ToFloat])
    public f: number[] = [];

    @TypeArray([TypeInt64(), ToInt64])
    public i64: number[] = [];

    @TypeArray([TypeUnInt32(), ToUnInt32])
    @Required()
    public ui32: number[] = [];
  }
}


const Foo = NsFoo.Foo;
const Baz = NsBaz.Baz;
const Bar = NsBar.Bar;

export {
  Color,
  Foo,
  Baz,
  Bar
}

